{"code":"V509","currLine":"   PLUGIFY_ASSERT(size() == Size, \"plg::vector::span_size(): const_span_size argument does not match size of vector\", std::length_error);","cwe":248,"falseAlarm":false,"level":1,"message":"The noexcept function 'span_size' throws an exception. Consider wrapping the throw operator in a try..catch block.","nextLine":"   return std::span<T, Size>(data(), size());","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\vector.hpp","lines":[949]}],"prevLine":"  [[nodiscard]] constexpr std::span<T, Size> span_size() noexcept {","sastId":"CERT-DCL57-CPP"}
{"code":"V509","currLine":"   PLUGIFY_ASSERT(size() == Size, \"plg::vector::const_span_size(): const_span_size argument does not match size of vector\", std::length_error);","cwe":248,"falseAlarm":false,"level":1,"message":"The noexcept function 'const_span_size' throws an exception. Consider wrapping the throw operator in a try..catch block.","nextLine":"   return std::span<const T, Size>(data(), size());","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\vector.hpp","lines":[955]}],"prevLine":"  [[nodiscard]] constexpr std::span<const T, Size> const_span_size() const noexcept {","sastId":"CERT-DCL57-CPP"}
{"code":"V550","currLine":"  return lhs.x == rhs.x && lhs.y == rhs.y;","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: lhs.x == rhs.x. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":" }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[69]}],"prevLine":" constexpr bool operator==(const vec2& lhs, const vec2& rhs) {","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":"  return lhs.x == rhs.x && lhs.y == rhs.y;","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: lhs.y == rhs.y. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":" }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[69]}],"prevLine":" constexpr bool operator==(const vec2& lhs, const vec2& rhs) {","sastId":"CERT-FLP02-C"}
{"code":"V835","currLine":" constexpr bool operator==(const vec2& lhs, const vec2& rhs) {","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const vec2& lhs' with 'vec2 lhs'.","nextLine":"  return lhs.x == rhs.x && lhs.y == rhs.y;","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[68]}]}
{"code":"V835","currLine":" constexpr bool operator==(const vec2& lhs, const vec2& rhs) {","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const vec2& rhs' with 'vec2 rhs'.","nextLine":"  return lhs.x == rhs.x && lhs.y == rhs.y;","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[68]}]}
{"code":"V550","currLine":"  return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z;","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: lhs.x == rhs.x. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":" }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[73]}],"prevLine":" constexpr bool operator==(const vec3& lhs, const vec3& rhs) {","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":"  return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z;","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: lhs.y == rhs.y. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":" }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[73]}],"prevLine":" constexpr bool operator==(const vec3& lhs, const vec3& rhs) {","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":"  return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z;","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: lhs.z == rhs.z. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":" }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[73]}],"prevLine":" constexpr bool operator==(const vec3& lhs, const vec3& rhs) {","sastId":"CERT-FLP02-C"}
{"code":"V835","currLine":" constexpr bool operator==(const vec3& lhs, const vec3& rhs) {","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const vec3& lhs' with 'vec3 lhs'.","nextLine":"  return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z;","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[72]}]}
{"code":"V835","currLine":" constexpr bool operator==(const vec3& lhs, const vec3& rhs) {","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const vec3& rhs' with 'vec3 rhs'.","nextLine":"  return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z;","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[72]}]}
{"code":"V550","currLine":"  return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z && lhs.w == rhs.w;","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: lhs.x == rhs.x. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":" }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[77]}],"prevLine":" constexpr bool operator==(const vec4& lhs, const vec4& rhs) {","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":"  return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z && lhs.w == rhs.w;","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: lhs.y == rhs.y. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":" }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[77]}],"prevLine":" constexpr bool operator==(const vec4& lhs, const vec4& rhs) {","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":"  return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z && lhs.w == rhs.w;","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: lhs.z == rhs.z. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":" }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[77]}],"prevLine":" constexpr bool operator==(const vec4& lhs, const vec4& rhs) {","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":"  return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z && lhs.w == rhs.w;","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: lhs.w == rhs.w. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":" }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[77]}],"prevLine":" constexpr bool operator==(const vec4& lhs, const vec4& rhs) {","sastId":"CERT-FLP02-C"}
{"code":"V835","currLine":" constexpr bool operator==(const vec4& lhs, const vec4& rhs) {","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the first argument 'const vec4& lhs' with 'vec4 lhs'.","nextLine":"  return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z && lhs.w == rhs.w;","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[76]}]}
{"code":"V835","currLine":" constexpr bool operator==(const vec4& lhs, const vec4& rhs) {","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const vec4& rhs' with 'vec4 rhs'.","nextLine":"  return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z && lhs.w == rhs.w;","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[76]}]}
{"code":"V550","currLine":"   if (lhs.data[i] != rhs.data[i])","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: lhs.data[i] != rhs.data[i]. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon.","nextLine":"    return false;","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\numerics.hpp","lines":[82]}],"prevLine":"  for (int i = 0; i < 16; ++i) {","sastId":"CERT-FLP02-C"}
{"code":"V832","currLine":"   INJECT_UNION_SFM(union_node)","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"  };","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\variant.hpp","lines":[308]}]}
{"code":"V830","currLine":"     next = detail::to_chars(next, prerelease_number.value());","falseAlarm":false,"level":2,"message":"Decreased performance. Consider replacing the 'prerelease_number.value()' expression to '*prerelease_number'.","nextLine":"    }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\version.hpp","lines":[306]}],"prevLine":"    if (prerelease_number.has_value()) {"}
{"code":"V830","currLine":"     length += detail::length(prerelease_number.value()) + 1;","falseAlarm":false,"level":2,"message":"Decreased performance. Consider replacing the 'prerelease_number.value()' expression to '*prerelease_number'.","nextLine":"    }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\version.hpp","lines":[350]}],"prevLine":"     // + 1(.) + (<prereleaseversion>)"}
{"code":"V830","currLine":"     return prerelease_number.value() - other.prerelease_number.value();","falseAlarm":false,"level":2,"message":"Decreased performance. Consider replacing the 'prerelease_number.value()' expression to '*prerelease_number'.","nextLine":"    }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\version.hpp","lines":[376]}],"prevLine":"    if (other.prerelease_number.has_value()) {"}
{"code":"V830","currLine":"     return prerelease_number.value() - other.prerelease_number.value();","falseAlarm":false,"level":2,"message":"Decreased performance. Consider replacing the 'other.prerelease_number.value()' expression to '*other.prerelease_number'.","nextLine":"    }","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\version.hpp","lines":[376]}],"prevLine":"    if (other.prerelease_number.has_value()) {"}
{"code":"V524","currLine":"  constexpr std::span<const T> const_span() const noexcept {","falseAlarm":false,"level":3,"message":"It is odd that the body of 'const_span' function is fully equivalent to the body of 'span' function.","nextLine":"   return std::span<const T>(data(), size());","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\vector.hpp","lines":[943,935]}]}
{"code":"V524","currLine":"  [[nodiscard]] constexpr std::span<const std::byte> const_byte_span() const noexcept {","falseAlarm":false,"level":3,"message":"It is odd that the body of 'const_byte_span' function is fully equivalent to the body of 'byte_span' function.","nextLine":"   return std::as_bytes(span());","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\vector.hpp","lines":[967,959]}]}
{"code":"V524","currLine":"  [[nodiscard]] constexpr size_type find_last_not_of(const basic_string& str, size_type pos = npos) const noexcept {","falseAlarm":false,"level":2,"message":"It is odd that the body of 'find_last_not_of' function is fully equivalent to the body of 'find_first_not_of' function.","nextLine":"   return view().find_last_not_of(sview_type(str), pos);","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\string.hpp","lines":[1504,1454]}]}
{"code":"V524","currLine":"  [[nodiscard]] constexpr size_type find_last_not_of(const value_type* str, size_type pos, size_type count) const noexcept {","falseAlarm":false,"level":2,"message":"It is odd that the body of 'find_last_not_of' function is fully equivalent to the body of 'find_first_not_of' function.","nextLine":"   return view().find_last_not_of(str, pos, count);","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\string.hpp","lines":[1508,1458]}]}
{"code":"V524","currLine":"  [[nodiscard]] constexpr size_type find_last_not_of(const value_type* str, size_type pos = npos) const noexcept {","falseAlarm":false,"level":2,"message":"It is odd that the body of 'find_last_not_of' function is fully equivalent to the body of 'find_first_not_of' function.","nextLine":"   return view().find_last_not_of(str, pos);","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\string.hpp","lines":[1512,1462]}]}
{"code":"V1003","currLine":"#  define PLUGIFY_ASSERT(x, str, ...) assert(x && str)","falseAlarm":false,"level":3,"message":"The macro 'PLUGIFY_ASSERT' is a dangerous expression. The parameters 'x', 'str' must be surrounded by parentheses.","nextLine":"#elif PLUGIFY_FALLBACK_ABORT","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\macro.hpp","lines":[61]}],"prevLine":"#  include <cassert>"}
{"code":"V001","currLine":"     constexpr bool do_simple_copy =","falseAlarm":false,"level":3,"message":"A code fragment cannot be analyzed.","nextLine":"       std::is_nothrow_copy_constructible_v<type>","positions":[{"file":"D:\\templates\\plugify-plugin-cpp-template\\plugify\\variant.hpp","lines":[762,816]}],"prevLine":"     using type = alternative<index_cst>;"}
